Title: Supervised learningSummary: Supervised learning (SL) is a machine learning paradigm for problems where the available data consists of labeled examples, meaning that each data point contains features (covariates) and an associated label. The goal of supervised learning algorithms is learning a function that maps feature vectors (inputs) to labels (output), based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples. In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a "reasonable" way (see inductive bias). This statistical quality of an algorithm is measured through the so-called generalization error.Sections:   - Steps to follow: To solve a given problem of supervised learning, one has to perform the following steps:

Determine the type of training examples. Before doing anything else, the user should decide what kind of data is to be used as a training set. In the case of handwriting analysis, for example, this might be a single handwritten character, an entire handwritten word, an entire sentence of handwriting or perhaps a full paragraph of handwriting.
Gather a training set. The training set needs to be representative of the real-world use of the function. Thus, a set of input objects is gathered and corresponding outputs are also gathered, either from human experts or from measurements.
Determine the input feature representation of the learned function. The accuracy of the learned function depends strongly on how the input object is represented. Typically, the input object is transformed into a feature vector, which contains a number of features that are descriptive of the object. The number of features should not be too large, because of the curse of dimensionality; but should contain enough information to accurately predict the output.
Determine the structure of the learned function and corresponding learning algorithm. For example, the engineer may choose to use support-vector machines or decision trees.
Complete the design. Run the learning algorithm on the gathered training set. Some supervised learning algorithms require the user to determine certain control parameters. These parameters may be adjusted by optimizing performance on a subset (called a validation set) of the training set, or via cross-validation.
Evaluate the accuracy of the learned function. After parameter adjustment and learning, the performance of the resulting function should be measured on a test set that is separate from the training set.   - Algorithm choice: A wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem).
There are four major issues to consider in supervised learning:   - How supervised learning algorithms work: Given a set of 
  
    
      
        N
      
    
    {\displaystyle N}
   training examples of the form 
  
    
      
        {
        (
        
          x
          
            1
          
        
        ,
        
          y
          
            1
          
        
        )
        ,
        .
        .
        .
        ,
        (
        
          x
          
            N
          
        
        ,
        
        
          y
          
            N
          
        
        )
        }
      
    
    {\displaystyle \{(x_{1},y_{1}),...,(x_{N},\;y_{N})\}}
   such that 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
   is the feature vector of the 
  
    
      
        i
      
    
    {\displaystyle i}
  -th example and 
  
    
      
        
          y
          
            i
          
        
      
    
    {\displaystyle y_{i}}
   is its label (i.e., class), a learning algorithm seeks a function 
  
    
      
        g
        :
        X
        →
        Y
      
    
    {\displaystyle g:X\to Y}
  , where 
  
    
      
        X
      
    
    {\displaystyle X}
   is the input space and 
  
    
      
        Y
      
    
    {\displaystyle Y}
   is the output space. The function 
  
    
      
        g
      
    
    {\displaystyle g}
   is an element of some space of possible functions 
  
    
      
        G
      
    
    {\displaystyle G}
  , usually called the hypothesis space. It is sometimes convenient to represent 
  
    
      
        g
      
    
    {\displaystyle g}
   using a scoring function 
  
    
      
        f
        :
        X
        ×
        Y
        →
        
          R
        
      
    
    {\displaystyle f:X\times Y\to \mathbb {R} }
   such that 
  
    
      
        g
      
    
    {\displaystyle g}
   is defined as returning the 
  
    
      
        y
      
    
    {\displaystyle y}
   value that gives the highest score: 
  
    
      
        g
        (
        x
        )
        =
        
          
            
              arg
              ⁡
              max
            
            y
          
        
        
        f
        (
        x
        ,
        y
        )
      
    
    {\displaystyle g(x)={\underset {y}{\arg \max }}\;f(x,y)}
  . Let 
  
    
      
        F
      
    
    {\displaystyle F}
   denote the space of scoring functions.
Although 
  
    
      
        G
      
    
    {\displaystyle G}
   and 
  
    
      
        F
      
    
    {\displaystyle F}
   can be any space of functions, many learning algorithms are probabilistic models where 
  
    
      
        g
      
    
    {\displaystyle g}
   takes the form of a conditional probability model 
  
    
      
        g
        (
        x
        )
        =
        P
        (
        y
        
          |
        
        x
        )
      
    
    {\displaystyle g(x)=P(y|x)}
  , or 
  
    
      
        f
      
    
    {\displaystyle f}
   takes the form of a joint probability model 
  
    
      
        f
        (
        x
        ,
        y
        )
        =
        P
        (
        x
        ,
        y
        )
      
    
    {\displaystyle f(x,y)=P(x,y)}
  . For example, naive Bayes and linear discriminant analysis are joint probability models, whereas logistic regression is a conditional probability model.
There are two basic approaches to choosing 
  
    
      
        f
      
    
    {\displaystyle f}
   or 
  
    
      
        g
      
    
    {\displaystyle g}
  : empirical risk minimization and structural risk minimization. Empirical risk minimization seeks the function that best fits the training data. Structural risk minimization includes a penalty function that controls the bias/variance tradeoff.
In both cases, it is assumed that the training set consists of a sample of independent and identically distributed pairs, 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        
        
          y
          
            i
          
        
        )
      
    
    {\displaystyle (x_{i},\;y_{i})}
  . In order to measure how well a function fits the training data, a loss function 
  
    
      
        L
        :
        Y
        ×
        Y
        →
        
          
            R
          
          
            ≥
            0
          
        
      
    
    {\displaystyle L:Y\times Y\to \mathbb {R} ^{\geq 0}}
   is defined. For training example 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        
        
          y
          
            i
          
        
        )
      
    
    {\displaystyle (x_{i},\;y_{i})}
  , the loss of predicting the value 
  
    
      
        
          
            
              y
              ^
            
          
        
      
    
    {\displaystyle {\hat {y}}}
   is 
  
    
      
        L
        (
        
          y
          
            i
          
        
        ,
        
          
            
              y
              ^
            
          
        
        )
      
    
    {\displaystyle L(y_{i},{\hat {y}})}
  .
The risk 
  
    
      
        R
        (
        g
        )
      
    
    {\displaystyle R(g)}
   of function 
  
    
      
        g
      
    
    {\displaystyle g}
   is defined as the expected loss of 
  
    
      
        g
      
    
    {\displaystyle g}
  . This can be estimated from the training data as

  
    
      
        
          R
          
            e
            m
            p
          
        
        (
        g
        )
        =
        
          
            1
            N
          
        
        
          ∑
          
            i
          
        
        L
        (
        
          y
          
            i
          
        
        ,
        g
        (
        
          x
          
            i
          
        
        )
        )
      
    
    {\displaystyle R_{emp}(g)={\frac {1}{N}}\sum _{i}L(y_{i},g(x_{i}))}
  .   - Generative training: The training methods described above are discriminative training methods, because they seek to find a function 
  
    
      
        g
      
    
    {\displaystyle g}
   that discriminates well between the different output values (see discriminative model). For the special case where 
  
    
      
        f
        (
        x
        ,
        y
        )
        =
        P
        (
        x
        ,
        y
        )
      
    
    {\displaystyle f(x,y)=P(x,y)}
   is a joint probability distribution and the loss function is the negative log likelihood 
  
    
      
        −
        
          ∑
          
            i
          
        
        log
        ⁡
        P
        (
        
          x
          
            i
          
        
        ,
        
          y
          
            i
          
        
        )
        ,
      
    
    {\displaystyle -\sum _{i}\log P(x_{i},y_{i}),}
   a risk minimization algorithm is said to perform generative training, because 
  
    
      
        f
      
    
    {\displaystyle f}
   can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis.   - Generalizations: There are several ways in which the standard supervised learning problem can be generalized:

Semi-supervised learning: In this setting, the desired output values are provided only for a subset of the training data. The remaining data is unlabeled.
Weak supervision: In this setting, noisy, limited, or imprecise sources are used to provide supervision signal for labeling training data.
Active learning: Instead of assuming that all of the training examples are given at the start, active learning algorithms interactively collect new examples, typically by making queries to a human user. Often, the queries are based on unlabeled data, which is a scenario that combines semi-supervised learning with active learning.
Structured prediction: When the desired output value is a complex object, such as a parse tree or a labeled graph, then standard methods must be extended.
Learning to rank: When the input is a set of objects and the desired output is a ranking of those objects, then again the standard methods must be extended.   - Approaches and algorithms: Analytical learning
Artificial neural network
Backpropagation
Boosting (meta-algorithm)
Bayesian statistics
Case-based reasoning
Decision tree learning
Inductive logic programming
Gaussian process regression
Genetic programming
Group method of data handling
Kernel estimators
Learning automata
Learning classifier systems
Learning vector quantization
Minimum message length (decision trees, decision graphs, etc.)
Multilinear subspace learning
Naive Bayes classifier
Maximum entropy classifier
Conditional random field
Nearest neighbor algorithm
Probably approximately correct learning (PAC) learning
Ripple down rules, a knowledge acquisition methodology
Symbolic machine learning algorithms
Subsymbolic machine learning algorithms
Support vector machines
Minimum complexity machines (MCM)
Random forests
Ensembles of classifiers
Ordinal classification
Data pre-processing
Handling imbalanced datasets
Statistical relational learning
Proaftn, a multicriteria classification algorithm   - Applications: Bioinformatics
Cheminformatics
Quantitative structure–activity relationship
Database marketing
Handwriting recognition
Information retrieval
Learning to rank
Information extraction
Object recognition in computer vision
Optical character recognition
Spam detection
Pattern recognition
Speech recognition
Supervised learning is a special case of downward causation in biological systems
Landform classification using satellite imagery
Spend classification in procurement processes   - General issues: Computational learning theory
Inductive bias
Overfitting (machine learning)
(Uncalibrated) class membership probabilities
Unsupervised learning
Version spaces   - See also: List of datasets for machine learning research   - References:    - External links: Machine Learning Open Source Software (MLOSS)